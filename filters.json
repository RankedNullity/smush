{
  "title": "Migration Smush Filter Configuration",
  "description": "Configuration for filtering SQL queries during migration consolidation. Includes both pattern-based filters and dynamic CREATE/DROP analysis.",
  "filters": [
    {
      "name": "DROP operations",
      "patterns": [
        "^DROP\\s",
        "DROP\\s+INDEX",
        "DROP\\s+TABLE",
        "DROP\\s+COLUMN",
        "DROP\\s+CONSTRAINT",
        "DROP\\s+SEQUENCE",
        "DROP\\s+TRIGGER",
        "DROP\\s+FUNCTION"
      ],
      "reason": "DROP operations dont need to be in the final composed migration",
      "enabled": true
    },
    {
      "name": "CREATE TABLE operations",
      "patterns": [
        "^CREATE\\s+TABLE"
      ],
      "reason": "CREATE TABLE operations should be generated by schema changes",
      "enabled": true
    },
    {
      "name": "ALTER TABLE column operations", 
      "patterns": [
        "ALTER\\s+TABLE.*ADD\\s+COLUMN",
        "ALTER\\s+TABLE.*DROP\\s+COLUMN",
        "ALTER\\s+TABLE.*RENAME\\s+COLUMN"
      ],
      "reason": "ALTER TABLE ADD/DROP COLUMN operations should be generated by schema changes",
      "enabled": true
    },
    {
      "name": "ALTER TYPE operations",
      "patterns": [
        "^ALTER\\s+TYPE",
        "ALTER\\s+TYPE.*ADD\\s+VALUE",
        "ALTER\\s+TYPE.*RENAME\\s+VALUE"
      ],
      "reason": "ALTER TYPE operations should reflect the most up-to-date type definition from schema",
      "enabled": true
    },
    {
      "name": "CREATE TYPE operations",
      "patterns": [
        "^CREATE\\s+TYPE"
      ],
      "reason": "CREATE TYPE operations will be up to date with the generated Prisma schema",
      "enabled": true
    },
    {
      "name": "ALTER COLUMN operations",
      "patterns": [
        "ALTER\\s+TABLE.*ALTER\\s+COLUMN",
        "ALTER\\s+COLUMN"
      ],
      "reason": "ALTER COLUMN operations will be up to date with the generated Prisma schema",
      "enabled": true
    },

    {
      "name": "Data seeding operations",
      "patterns": [
        "^\\s*INSERT\\s+INTO\\s+[`\"']?\\w+[`\"']?",
        "^\\s*UPDATE\\s+[`\"']?\\w+[`\"']?\\s+SET\\s+",
        "\\bINSERT\\s+INTO\\s+[`\"']?\\w+[`\"']?",
        "\\bUPDATE\\s+[`\"']?\\w+[`\"']?\\s+SET\\s+",
        "INSERT\\s+INTO\\s+[`\"']?[a-zA-Z_][a-zA-Z0-9_]*[`\"']?",
        "UPDATE\\s+[`\"']?[a-zA-Z_][a-zA-Z0-9_]*[`\"']?\\s+SET"
      ],
      "reason": "Data seeding should be handled separately from schema migrations",
      "enabled": true
    },
    {
      "name": "Constraint operations",
      "patterns": [
        "ADD\\s+CONSTRAINT",
        "DROP\\s+CONSTRAINT",
        "ALTER\\s+TABLE.*ADD\\s+FOREIGN\\s+KEY"
      ],
      "reason": "Constraint operations should be generated by schema relationship definitions",
      "enabled": false
    },
    {
      "name": "CREATE INDEX operations",
      "patterns": [
        "^CREATE\\s+(?:UNIQUE\\s+)?INDEX"
      ],
      "reason": "CREATE INDEX operations may be custom and should be reviewed",
      "enabled": false
    }
  ],
  "dynamicFiltering": {
    "description": "In addition to pattern-based filters above, the tool automatically applies dynamic CREATE/DROP analysis",
    "explanation": "Any CREATE statement (TABLE, INDEX, TYPE, etc.) that is followed by a corresponding DROP statement of the same object will be automatically filtered out as redundant",
    "constraintFiltering": "ADD CONSTRAINT statements that are followed by corresponding DROP CONSTRAINT statements on the same table/constraint will also be filtered as redundant",
    "supportedObjects": ["TABLE", "INDEX", "TYPE", "FUNCTION", "PROCEDURE", "TRIGGER", "SEQUENCE", "VIEW"],
    "supportedConstraints": ["CONSTRAINT", "FOREIGN KEY", "CHECK", "UNIQUE", "PRIMARY KEY"]
  }
}
