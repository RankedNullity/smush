#!/usr/bin/env bun
/**
 * Migration Smush - Consolidate Prisma migrations
 * Usage: bun smush.ts [steps] [--prisma-dir=path]
 * 
 * Examples:
 * bun smush.ts                      # Run all steps (1-5)
 * bun smush.ts 1-3                  # Run steps 1 through 3
 * bun smush.ts 1,3,5                # Run specific steps 1, 3, and 5
 * bun smush.ts 2                    # Run only step 2
 * bun smush.ts 1-5 --prisma-dir=/absolute/path/to/prisma
 */
import { execSync } from "child_process";
import path from "path";
import fs from "fs";

// Parse command line arguments
const args = process.argv.slice(2);

// Check for help flag
if (args.includes('--help') || args.includes('-h')) {
  console.log(`
🚀 Migration Smush Tool
=======================

USAGE:
  bun smush.ts [steps] --prisma-dir=PATH

EXAMPLES:
  bun smush.ts --prisma-dir=/path/to/project/prisma                    # Run all steps (1-5)
  bun smush.ts 1-3 --prisma-dir=/path/to/project/prisma              # Run steps 1 through 3  
  bun smush.ts 1,3,5 --prisma-dir=/path/to/project/prisma            # Run specific steps 1, 3, and 5
  bun smush.ts 2 --prisma-dir=/path/to/project/prisma                # Run only step 2

STEPS:
  1  Backup migrations and extract queries
  2  Reset database and generate consolidated migration
  3  Parse new migration and clean query table
  4  Filter out queries based on patterns
  5  Save remaining queries to missing-queries.sql

OPTIONS:
  --prisma-dir=PATH    Absolute path to prisma directory (REQUIRED)
  --help, -h           Show this help message

NOTES:
  - Step 2 will reset your current database - make sure you have backups!
  - Results are saved to the migration folder generated by step 2
`);
  process.exit(0);
}

// Parse prisma directory argument (required)
const prismaDirArg = args.find((arg) => arg.startsWith("--prisma-dir="));
if (!prismaDirArg) {
  console.error("❌ Error: --prisma-dir argument is required");
  console.error("");
  console.error("Usage: bun smush.ts [steps] --prisma-dir=/path/to/prisma");
  console.error("");
  console.error("Examples:");
  console.error("  bun smush.ts --prisma-dir=/path/to/my-project/prisma");
  console.error("  bun smush.ts 1-3 --prisma-dir=/path/to/my-project/prisma");
  console.error("");
  console.error("Use --help for full documentation");
  process.exit(1);
}

const prismaDir = prismaDirArg.split("=")[1];
if (!prismaDir || prismaDir.trim() === "") {
  console.error("❌ Error: --prisma-dir cannot be empty");
  console.error("Usage: bun smush.ts --prisma-dir=/path/to/prisma");
  process.exit(1);
}

// Parse steps argument
const stepsArg = args.find((arg) => !arg.startsWith("--"));
const otherArgs = args.filter((arg) => arg.startsWith("--")).join(" ");

// Define all available steps
const allSteps = [
  {
    id: 1,
    script: "steps/step1-backup.ts",
    description: "Backup migrations and extract queries",
  },
  { 
    id: 2,
    script: "steps/step2-reset.ts", 
    description: "Reset database and generate consolidated migration" 
  },
  {
    id: 3,
    script: "steps/step3-parse.ts",
    description: "Parse new migration and clean query table",
  },
  { 
    id: 4,
    script: "steps/step4-filter.ts", 
    description: "Filter out queries based on patterns" 
  },
  { 
    id: 5,
    script: "steps/step5-save.ts", 
    description: "Save remaining queries to missing-queries.sql" 
  },
];

// Parse which steps to run
function parseSteps(stepsInput: string | undefined): number[] {
  if (!stepsInput) {
    // Run all steps by default
    return [1, 2, 3, 4, 5];
  }

  const steps: number[] = [];
  
  // Handle ranges (e.g., "1-3") and individual steps (e.g., "1,3,5")
  const parts = stepsInput.split(',');
  
  for (const part of parts) {
    if (part.includes('-')) {
      // Handle range
      const [start, end] = part.split('-').map(n => parseInt(n.trim()));
      if (start && end && start <= end) {
        for (let i = start; i <= end; i++) {
          if (i >= 1 && i <= 5) steps.push(i);
        }
      }
    } else {
      // Handle individual step
      const stepNum = parseInt(part.trim());
      if (stepNum >= 1 && stepNum <= 5) {
        steps.push(stepNum);
      }
    }
  }
  
  // Remove duplicates and sort
  return [...new Set(steps)].sort();
}

const stepsToRun = parseSteps(stepsArg);

if (stepsToRun.length === 0) {
  console.error("❌ No valid steps specified. Use 1-5, e.g.:");
  console.error("   bun smush.ts --prisma-dir=/path/to/prisma        # Run all steps");
  console.error("   bun smush.ts 1-3 --prisma-dir=/path/to/prisma   # Run steps 1-3");
  console.error("   bun smush.ts 1,3,5 --prisma-dir=/path/to/prisma # Run steps 1, 3, and 5");
  process.exit(1);
}

console.log("🚀 Migration Smush Tool");
console.log("=======================");
console.log(`📁 Using prisma directory: ${prismaDir}`);
console.log(`🔢 Running steps: ${stepsToRun.join(', ')}`);
console.log("");

try {
  const stepsToExecute = stepsToRun.map(stepId => allSteps.find(s => s.id === stepId)!);
  
  for (const step of stepsToExecute) {
    console.log(`\n🔄 Step ${step.id}: ${step.description}`);
    console.log(`📄 Script: ${step.script}`);
    console.log("─".repeat(50));

    execSync(`bun ${step.script} ${otherArgs}`, {
      stdio: "inherit",
      cwd: process.cwd(),
    });

    console.log("─".repeat(50));
    console.log(`✅ Step ${step.id} completed\n`);
  }

  console.log("\n📋 MIGRATION SMUSH SUMMARY");
  console.log("==========================");
  console.log(
    `📁 Backup location: ${path.join(prismaDir, "migrations-backup")}`,
  );
  console.log(
    `📄 Missing queries file: ${path.join(prismaDir, "migrations", "missing-queries.sql")}`,
  );
  console.log("✅ Migration smush complete!");
} catch (error) {
  console.error("\n❌ Migration smush failed:", error);
  process.exit(1);
}
